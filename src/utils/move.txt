// const move = (): void => {
//   // if (JSON.stringify(snake) === JSON.stringify(destination)) {
//   //   return;
//   // }

//   if ((snake[0].x + 30) > boardWidth || (snake[0].y) + 30 > boardHeight) {
//     return;
//   }

//   // const headCoordinates = snake[0];
//   // const newHeadCoordinates = {
//   //   x: headCoordinates.x + 30,
//   //   y: headCoordinates.y + 0,
//   // };

//   // const newSnake = [newHeadCoordinates, ...snake.slice(0, -1)];

//   const newSnake = snake.map<ISnake>((piece: ISnake, index: number) => {
//     const { x, y } = piece;
//     // const { x: destinationX, y: destinationY } = destination[index];
//     const { x: destinationX, y: destinationY } = direction;

//     const newCoordinates = {
//       // x: makeStep(x, boardWidth),
//       x: x + destinationX,
//       // y: makeStep(y, boardHeight),
//       y,
//     };

//     console.log(newCoordinates);

//     return newCoordinates;
//   });
//   // console.log(newSnake);

//   setSnake(newSnake);
// };



  const makeStep = (coordinate: number, destinationCoordinate: number, step: number): number => {
    if (coordinate < destinationCoordinate) {
      return coordinate + step;
    }

    if (coordinate > destinationCoordinate) {
      return coordinate - step;
    }

    return coordinate;
  };

  const getDestination = () => {
    const isComplited = snake.every((piece, index) => (
      piece.x === destination[index].x && piece.y === destination[index].y
    ));

    if (!isComplited) {
      return;
    }

    const headCoordinates = snake[0];
    const newHeadCoordinates = {
      x: headCoordinates.x + direction.x,
      y: headCoordinates.y + direction.y,
    };

    const newDestination = [newHeadCoordinates, ...snake.slice(0, -1)];

    // const newDestination = snake.map(({ x, y }) => {
    //   const newPoint = {
    //     x: x + direction.x,
    //     y: y + direction.y,
    //   };

    //   return newPoint;
    // });

    setDestination(() => newDestination);
  };

  const move = (): void => {
    getDestination();

    // console.log(destination);

    const newSnake = snake.map<ICoordinates>((piece: ICoordinates, index: number) => {
      const { x, y } = piece;
      const { x: destinationX, y: destinationY } = destination[index];
      // const { x: destinationX, y: destinationY } = direction;

      const newCoordinates = {
        x: makeStep(x, destinationX, STEP),
        y: makeStep(y, destinationY, STEP),
      };

      console.log(newCoordinates);

      return newCoordinates;
    });
      // console.log(newSnake);const headCoordinates = snake[0];
    const headCoordinates = newSnake[0];
    const isFoodCell = compareCoordinates(headCoordinates, food);

    // if (isFoodCell) {
    //   setSnake([newSnake[0], ...snake]);
    //   getNewFood();
    // } else {
    //   setSnake(newSnake);
    // }

    setSnake(newSnake);
  };
